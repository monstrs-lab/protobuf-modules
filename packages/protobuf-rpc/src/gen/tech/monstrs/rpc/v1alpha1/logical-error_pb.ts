// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file tech/monstrs/rpc/v1alpha1/logical-error.proto (package tech.monstrs.rpc.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions } from '@bufbuild/protobuf'
import type { FieldList }         from '@bufbuild/protobuf'
import type { JsonReadOptions }   from '@bufbuild/protobuf'
import type { JsonValue }         from '@bufbuild/protobuf'
import type { PartialMessage }    from '@bufbuild/protobuf'
import type { PlainMessage }      from '@bufbuild/protobuf'

import { Message }                from '@bufbuild/protobuf'
import { proto3 }                 from '@bufbuild/protobuf'

/**
 * @generated from message tech.monstrs.rpc.v1alpha1.LogicalError
 */
export class LogicalError extends Message<LogicalError> {
  /**
   * @generated from field: string id = 1;
   */
  id = ''

  /**
   * @generated from field: string message = 2;
   */
  message = ''

  /**
   * @generated from field: map<string, string> metadata = 3;
   */
  metadata: { [key: string]: string } = {}

  constructor(data?: PartialMessage<LogicalError>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.rpc.v1alpha1.LogicalError'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'message', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 3,
      name: 'metadata',
      kind: 'map',
      K: 9 /* ScalarType.STRING */,
      V: { kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LogicalError {
    return new LogicalError().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LogicalError {
    return new LogicalError().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LogicalError {
    return new LogicalError().fromJsonString(jsonString, options)
  }

  static equals(
    a: LogicalError | PlainMessage<LogicalError> | undefined,
    b: LogicalError | PlainMessage<LogicalError> | undefined
  ): boolean {
    return proto3.util.equals(LogicalError, a, b)
  }
}
